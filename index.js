const { Telegraf, Markup } = require('telegraf');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const {startTxt, privateKotaStartTxt, uidRefuse, uidFind, uidChange, educationKotaStartTxt, doneRegistration,
    noRegistrationDoneDepNo
} = require("./textConsts");
const { RestClientV5 } = require('bybit-api');
require('dotenv').config();
// API –∫–ª—é—á–∏ –±–æ—Ç–∞
const mainBotToken = process.env.mainBotTOKEN;
const testBotToken = process.env.testBotTOKEN;
// API –∫–ª—é—á–∏ byibt
const apiKey = process.env.apiPublic;
const apiSecret = process.env.apiSecretApi;


const client = new RestClientV5({
    testnet: false,
    key: apiKey,
    secret: apiSecret,
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
const db = new sqlite3.Database('./users.db', (err) => {
    if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', err);
    } else {
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite');
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ–ª—è–º–∏ id —Ç–∞ username
        db.run(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT
            )
        `);
    }
});
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
function saveUser(telegramId, username) {
    db.run(`
        INSERT OR IGNORE INTO users(id, username) 
        VALUES(?, ?)
    `, [telegramId, username], (err) => {
        if (err) {
            return console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
        }
        console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', telegramId);
    });
}


const tgcryptakotaBot = new Telegraf(mainBotToken);
tgcryptakotaBot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞' },
]);
tgcryptakotaBot.start((ctx) => {
    const telegramId = ctx.from.id;
    const username = ctx.from.username || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
    saveUser(telegramId, username);
    ctx.replyWithHTML(
        startTxt,
        Markup.inlineKeyboard(
            [
                [Markup.button.callback('üìàüí∞–°–æ–æ–±—â–µ—Å—Ç–≤–æ PRIVATE KOTA', 'btn_privateKota')],
                [Markup.button.callback('üß†üë®‚Äçüíª–ê–∫–∞–¥–µ–º–∏—è EDUCATION KOTA', 'btn_educationKota')],
            ]
        )
    )
})

tgcryptakotaBot.action('btn_educationKota', (ctx) => {
    ctx.replyWithHTML(
        educationKotaStartTxt,
        Markup.inlineKeyboard([
            // [Markup.button.url('üîó–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'https://partner.bybit.com/b/kota')],
            [Markup.button.url('üë®‚Äçüíª–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'https://t.me/managerkota')],
        ])
    )
});

tgcryptakotaBot.action('btn_privateKota', (ctx) => {
    ctx.replyWithHTML(
        privateKotaStartTxt,
        Markup.inlineKeyboard([
            [Markup.button.url('üîó–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'https://partner.bybit.com/b/kota')],
            [Markup.button.url('üë®‚Äçüíª–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'https://t.me/managerkota')],
        ])
    )
});

async function fetchUserData(uid) {
    try {
        const response = await client.getAffiliateUserInfo({ uid });
        console.log(response);
        return response; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
    } catch (error) {
        console.error('Error fetching user data:', error);
        return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    }
}
// –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
tgcryptakotaBot.on('text', async (ctx) => {
    const message = ctx.message.text;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏
    if (/^\d+$/.test(message)) {
        const userData = await fetchUserData(message)
        const {result} = userData
        if (Object.keys(result).length === 0) {
            ctx.replyWithHTML(uidRefuse);
            setTimeout(() => {
                ctx.replyWithPhoto(
                    { source: path.join(__dirname, 'image', 'changeVerif.jpeg') },
                    {
                        caption: uidChange,
                        parse_mode: 'HTML'
                    }
                );
            }, 1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        } else {
            console.log(userData)
            if (result.KycLevel >= 1 && Number(result.depositAmount30Day) >= 100) {
                ctx.replyWithHTML(doneRegistration);
            } else if (result.KycLevel >= 1 && result.depositAmount30Day <= 100) {
                // –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —î (KycLevel >= 1) –∞–ª–µ –¥–µ–ø–æ–∑–∏—Ç –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 100
                ctx.replyWithHTML("<b>–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É–∂–µ –Ω–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ KYC-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é‚úÖ</b>\n" +
                    "\n" +
                    "<u>–Ø —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –≤–∞–º –º–µ—Å—Ç–æ –≤ PRIVATE KOTA.</u> ü§ñ\n" +
                    "\n" +
                    `–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${result.depositAmount30Day} \n` +
                    "\n" +
                    "2Ô∏è‚É£–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å</b> –Ω–∞ –±–∏—Ä–∂–µ Bybit <b>–Ω–∞ —Å—É–º–º—É –æ—Ç 100$</b> –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à <b>UID</b>, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ \"PRIVATE KOTA\"üìàüí∞.");
            } else {
                // –Ü–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏, —è–∫—â–æ –Ω–µ–º–∞—î –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —ñ –¥–µ–ø–æ–∑–∏—Ç –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 100
                ctx.replyWithHTML(noRegistrationDoneDepNo);
            }
        }
    }
    // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –±—É–∫–≤–∏ –∞–±–æ —ñ–Ω—à—ñ —Å–∏–º–≤–æ–ª–∏
    else {
        ctx.replyWithHTML('<b>UID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</b>');

        setTimeout(() => {
            ctx.replyWithPhoto(
                { source: path.join(__dirname, 'image', 'findUID.jpeg') },
                {
                    caption: uidFind,
                    parse_mode: 'HTML'
                }
            );
        }, 1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    }
});

tgcryptakotaBot.launch();

